//–ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID
  //S ‚Äî Single Responsibility Principle - –ü—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
  //–Ω–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä –∫–ª–∞—Å—Å, –º–µ—Ç–æ–¥, –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é ‚Äî –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–æ–∑–ª–æ–∂–µ–Ω–∞ –æ–¥–Ω–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å
  class Api { /* –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API */
    static async query<Result>(url: string): Promise<Result> {
      const response = await fetch(url);

      if (!response.ok) {
        throw new Error(response.statusText)
      }

      return await response.json();
    }
  }
  class Checkbox { /* –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ */
    static render(id: string, title: string, checked: boolean) {
      return `
              <div>
                  <input type="checkbox" name="${id}" ${checked ? 'checked' : ''} />
                  <label for="${id}">${title}</label>
              </div>
          `;
    }
  }
  interface Todo {
    id: string;
    title: string;
    ready: boolean;
  }
  class TodoApi { /* –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Todo API */
    static async fetchTodos() {
      try {
        return Api.query<Todo[]>('https://some.ru/api/todos');
      }
      catch (error) {
        console.error('–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª!', error);
      }
      return null;
    }
  }
  class TodoLayout { /* –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è To do */
    static render(todo: Todo) {
      return Checkbox.render(todo.id, todo.title, todo.ready);
    }
  }
  class TodosState { /* –ö–ª–∞—Å—Å, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º To do */
    private todos: Todo[] | undefined;
    setTodos(todos: Todo[]) {
      this.todos = todos;
    }
    finishTodo(id: string) {
      const todo = this.todos?.find(todo => todo.id === id);
      if (todo) {
        todo.ready = true;
      }
    }
  }

  //O ‚Äî Open‚Äìclosed Principle - –ü—Ä–∏–Ω—Ü–∏–ø –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏-–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏
  //–ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –Ω–æ –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
  interface Engine {
    wheelsCount: number;
  }
  class Car implements Engine {
    get wheelsCount() {
      return 4;
    }
  }
  class Bicycle implements Engine {
    get wheelsCount() {
      return 2;
    }
  }
  function getWheelsCount(engine: Engine) {
    return engine.wheelsCount;
  }

  //L ‚Äî Liskov Substitution Principle - –ø—Ä–∏–Ω—Ü–∏–ø—É –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ë–∞—Ä–±–∞—Ä—ã –õ–∏—Å–∫–æ–≤
  //–ª—é–±–æ–π –∫–ª–∞—Å—Å –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–º –∫–ª–∞—Å—Å–æ–º, –∏ –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–∫, –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è

  //I ‚Äî Interface Segregation Principle - –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
  //–∏–∑–±–µ–≥–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  interface Contentful {
    content: string;
  }
  interface Clickable {
    onClick(): void;
  }
  const paragraph: Contentful = {
    content: '–°–≤–æ–±–æ–¥—É —Å–ª–æ–≤–∞ –Ω–µ –∑–∞–¥—É—à–∏—Ç—å, –ø—É—Å—Ç—å –¥–∞–∂–µ –ø–æ–º—ã—Å–ª—ã –ø–æ–∫–æ–ª–µ–Ω–∏—è —á–∏—Å—Ç—ã'
  }
  const button: Clickable & Contentful = {
    content: '–ó–∞–∫–∞–∑–∞—Ç—å',
    onClick: () => {
      console.log('–ì–æ—Ç–æ–≤–æ!')
    }
  }

  //D ‚Äî Dependency Inversion Principle - –ø—Ä–∏–Ω—Ü–∏–ø—É –∏–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  //–º–æ–¥—É–ª–∏ –≤–µ—Ä—Ö–Ω–∏—Ö —É—Ä–æ–≤–Ω–µ–π –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –º–æ–¥—É–ª–µ–π –Ω–∏–∂–Ω–∏—Ö —É—Ä–æ–≤–Ω–µ–π. –û–±–∞ —Ç–∏–ø–∞ –º–æ–¥—É–ª–µ–π –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π

//–ü—Ä–∏–Ω—Ü–∏–ø DRY - Don‚Äôt Repeat Yourself ‚Äî ¬´–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ—Å—å¬ª
  function getGreeting(): string {
    const time = new Date().getHours();
    if (time < 12) {
      return '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ';
    }
    if (time < 18) {
      return '–î–æ–±—Ä—ã–π –¥–µ–Ω—å';
    }
    return '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä';
  }
  function greetUser(name: string) {
    const greeting = getGreeting();
    console.log(`${greeting}, ${name}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!`);
  }
  function greetGuest(name: string) {
    const greeting = getGreeting();
    console.log(`${greeting}, ${name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ü§ó`);
  }
  greetGuest('–ò–≤–∞–Ω');
  greetUser('–ò–≤–∞–Ω');

//–ü—Ä–∏–Ω—Ü–∏–ø—ã BDUF, KISS, –ë—Ä–∏—Ç–≤–∞ –û–∫–∫–∞–º–∞, SSOT
  //todo –î–æ–ø–∏—Å–∞—Ç—å

//–ö–æ–º–ø–æ–∑–∏—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤
  //–ß—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –≤ –∫–ª–∞—Å—Å–µ, —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∑–∞–≤–∏—Å–∏–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –¥–µ–ª–∞—é—Ç —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç.
  class MySQLDataBase {   /* –†–∞–±–æ—Ç–∞–µ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö */
    constructor(private host: string) {};
    connect(): boolean { /* ... –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ... */
      return true;
    }
  }
  class ConsoleLogger { /* –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏ */
    constructor(private appName: string) {};
    log(message: string) {
      console.log(new Date().toDateString(), this.appName, message); /* –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –ª–æ–≥ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
    }
  }
  class API { /* –ö–ª–∞—Å—Å API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª–∞—Å—Å—ã MySQLDataBase –∏ ConsoleLogger */
    db: MySQLDataBase; //—Å–≤–æ–π—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∞ API - —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∫–ª–∞—Å—Å–∞ MySQLDataBase
    logger: ConsoleLogger; //—Å–≤–æ–π—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∞ API - —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∫–ª–∞—Å—Å–∞ ConsoleLogger
    constructor(appName: string) {
      /* –î–ª—è –∫–ª–∞—Å—Å–æ–≤ MySQLDataBase –∏ ConsoleLogger –Ω—É–∂–Ω—ã —ç–∫–∑–µ–º–ø–ª—è—Ä—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ */
      this.db = new MySQLDataBase('localhost');
      this.logger = new ConsoleLogger(appName);
    }
    init() {
      if (!this.db.connect()) { /* –¢–µ–ø–µ—Ä—å –∫–ª–∞—Å—Å—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å! */
        this.logger.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!');
      }
      this.logger.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!')
    }
  }
  const api = new API('MyApp');
  api.init();

//Dependency Injection - –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  interface DataBase { /* –í–≤–æ–¥–∏–º –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—é - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å DataBase */
    connect(): boolean;
  }
  class MySQLDataBase implements DataBase { /* –ö–ª–∞—Å—Å MySQLDataBase –µ—ë —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–µ—Ç */
    constructor(private host: string) {};
    connect(): boolean {
      return true;
    }
  }
  class API {
    db: DataBase; /* –ö–ª–∞—Å—Å API —Ç–µ–ø–µ—Ä—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ */
    constructor(db: DataBase) { /* –ù–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞–µ–º –ø—Ä–æ MySQLDataBase, –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è! */
      this.db = db;
    }
  }
  const db = new MySQLDataBase('localhost');
  const api1 = new API(db);

//–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  //todo

//–ü–∞—Ç—Ç–µ—Ä–Ω Singleton
  //–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —É –∫–ª–∞—Å—Å–∞ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä
  //–≠–∫–∑–µ–º–ø–ª—è—Ä Singleton-–∫–ª–∞—Å—Å–∞ –∏–º–µ–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞, –ø–æ—ç—Ç–æ–º—É –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
  class Singleton {
    private static instance: Singleton;
    private constructor() { } //—ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∏–∑–≤–Ω–µ
    static getInstance(): Singleton { //—Å–æ–∑–¥–∞—ë—Ç –∏–Ω—Å—Ç–∞–Ω—Å –∫–ª–∞—Å—Å–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ, –∞ –∑–∞—Ç–µ–º –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ
      if (!Singleton.instance) {
        Singleton.instance = new Singleton();
      }
      return Singleton.instance;
    }
  }
  //–ø—Ä–∏–º–µ—Ä2
  class Randomaizer {
    private participants: string[];
    private static instance: Randomaizer;
    private  constructor() {
      this.participants = [];
    }
    static getInstance(): Randomaizer {
      if (!Randomaizer.instance) {
        Randomaizer.instance = new Randomaizer();
      }
      return Randomaizer.instance;
    }
    private selectRandomIndex() {
      return Math.round(Math.random() * (this.participants.length - 1));
    }
    addParticipant(name: string) {
      this.participants.push(name);
    }
    finish() {
      const winner = this.participants[this.selectRandomIndex()];
      console.log(`–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${this.participants.length}`);
      console.log(`–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è ${winner}! üéâ`);
      this.participants = [];
      return winner;
    }
  }
  Randomaizer.getInstance().addParticipant('–ï–≥–æ—Ä');
  Randomaizer.getInstance().finish();
  Randomaizer.getInstance().addParticipant('–ò–≥–æ—Ä—å');
  Randomaizer.getInstance().addParticipant('–í–∞–¥–∏–º');
  Randomaizer.getInstance().finish();

//–ü–∞—Ç—Ç–µ—Ä–Ω—ã Adapter, Facade, Proxy
  //todo Facade, Proxy

  //Adapter
  class ArtistApi {
    getArtistInfo() {
      return {
        name: '–í–∞—Å–∏–ª–∏–π –ü–∞–≤–ª–æ–≤',
        albums: ['–í–∏–¥–µ—Ç—å']
      }
    }
    getAlbumInfo() {
      return {
        title: '–í–∏–¥–µ—Ç—å',
        songs: ['–õ—é–±–∏–º–∞—è', '–ù–æ–≤–∞—è –∂–∏–∑–Ω—å', '–õ–æ–≤–∏ –≤–æ–ª–Ω—É']
      }
    }
  }
  type Album = {
    title: string;
    songs: string[];
  }
  type Artist = {
    name: string;
    albums: Album[]
  }
  interface IArtistGraphql {
    artistQuery(): Artist;
  }
  class ArtistGraphql implements IArtistGraphql {
    artistQuery(): Artist {
      return {
        name: '–í–∞—Å–∏–ª–∏–π –ü–∞–≤–ª–æ–≤',
        albums: [
          {
            title: '–í–∏–¥–µ—Ç—å',
            songs: ['–õ—é–±–∏–º–∞—è', '–ù–æ–≤–∞—è –∂–∏–∑–Ω—å', '–õ–æ–≤–∏ –≤–æ–ª–Ω—É']
          }
        ]
      }
    }
  }
  class ArtistGraphqlAdapter implements IArtistGraphql {
    constructor(private artistApi: ArtistApi) {}
    artistQuery(): Artist {
      const artist = this.artistApi.getArtistInfo();
      return {
        ...artist,
        albums: artist.albums.map(() => this.artistApi.getAlbumInfo()),
      }
    }
  }
  const api2 = new ArtistGraphqlAdapter(
    new ArtistApi()
  );
  console.log(
    api2.artistQuery()
  );
  //–ø—Ä–∏–º–µ—Ä2
  class EmailInput {
    value: string;
    constructor() {
      this.value = '';
    }
    getErrors(): string | undefined {
      if (!this.value.includes('@')) {
        return '–í–≤–µ–¥—ë–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π email';
      }
      return undefined;
    }
  }
  interface Editor<Data> {
    initialize: (value: Data) => void,
    validate: () => void,
    getValue: () => Data,
  }

  class EmailEditorAdapter implements Editor<string> {
    constructor(private input: EmailInput) {}
    getValue(): string {
      return this.input.value;
    }
    initialize(value: string): void {
      this.input.value = value;
    }
    validate(): boolean {
      const error = this.input.getErrors();
      return error === undefined;
    }
  }

  const emailInput = new EmailInput();
  const emailEditor = new EmailEditorAdapter(emailInput);

  emailEditor.initialize('hello@some.ty');

  console.log(emailEditor.getValue());

  if (emailEditor.validate()) {
    console.log('Email —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
  }

  //Facade
  //–ø—Ä–∏–º–µ—Ä
  interface User {
    id: string,
    name: string,
    city: string,
  }
  class UserService {
    private users: User[] = [
      { id: '2061', name: '–¢–∏–º—É—Ä', city: '–°–∞—Ä–∞–Ω—Å–∫' },
      { id: '5864', name: '–ò–ª—å—è', city: '–ú–∞–π–∫–æ–ø' },
      { id: '3756', name: '–ï–≤–≥–µ–Ω–∏–π', city: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä' },
    ];
    getCurrentUser(id: string) {
      return this.users.find(user => user.id === id);
    }
  }
  interface City {
    name: string,
    region: string,
  }
  class GeoService {
    private cities: City[] = [
      { name: '–°–∞—Ä–∞–Ω—Å–∫', region: '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–æ—Ä–¥–æ–≤–∏—è' },
      { name: '–ú–∞–π–∫–æ–ø', region: '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–¥—ã–≥–µ—è' },
      { name: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', region: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –ö—Ä–∞–π' },
    ];
    getCity(cityName: string) {
      return this.cities.find(city => city.name === cityName);
    }
  }
  class Facade {
    constructor(private users: UserService, private geo: GeoService) {}
    getUserRegion(userId: string): string | undefined {
      const user = this.users.getCurrentUser(userId);
      if (!user) return undefined;
      const city = this.geo.getCity(user.city);
      if (!city) return undefined;
      return city.region;
    }
  }
  const facade = new Facade(new UserService(), new GeoService());
  console.log(
    facade.getUserRegion('5864') // –í—ã–≤–µ–¥–µ—Ç: '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–¥—ã–≥–µ—è'
  );

  //Proxy
  interface IClient {
    name: string;
    makeOrder(meal: string): void;
  }
  class Client implements IClient {
    constructor(public name: string) {}
    makeOrder(meal: string) {
      console.log(`${this.name} –∑–∞–∫–∞–∑–∞–ª ${meal}`);
    }
  }
  class ClientProxy implements IClient {
    private client: IClient;
    private orderCount: number; // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    constructor(client: IClient) {
      this.client = client;
      this.orderCount = 0; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –Ω—É–ª—ë–º
    }
    get name() {
      return this.client.name;
    }
    set name(value: string) {
      this.client.name = value;
    }
    makeOrder(meal: string) {
      this.client.makeOrder(meal); // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ makeOrder
      this.orderCount++; // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
      if (this.orderCount === 5) { // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–¥–µ–ª–∞–ª –ª–∏ –∫–ª–∏–µ–Ω—Ç 5 –∑–∞–∫–∞–∑–æ–≤
        console.log(`${this.name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞—à –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–∫–∏–¥–∫—É 10%!`);
      }
    }
  }
  const client = new ClientProxy(new Client('–ò–≥–æ—Ä—å'));
  client.makeOrder('—Å–∞–ª–∞—Ç –û–ª–∏–≤—å–µ');
  client.makeOrder('—à–∞—à–ª—ã–∫');

//–ü–∞—Ç—Ç–µ—Ä–Ω Observer
  //todo
  //–ü–∞—Ç—Ç–µ—Ä–Ω Observer –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏-–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è–º–∏ –∏ –æ–¥–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
  //–ø–∞—Ç—Ç–µ—Ä–Ω Observer —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π:
    //Observer (–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å, –ø–æ–¥–ø–∏—Å—á–∏–∫) ‚Äî —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    //Observable (–Ω–∞–±–ª—é–¥–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –∏—Å—Ç–æ—á–Ω–∏–∫) ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏—Ö –æ –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  interface Observer { //—Ç–∏–ø –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
    update(news: string): void;
  }
  class Subscriber implements Observer{ //–ø–æ–¥–ø–∏—Å—á–∏–∫
    constructor(public name: string) {}
    update(news: string): void { /* –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ */
      console.log(`${this.name} –ø–æ–ª—É—á–∏–ª –Ω–æ–≤–æ—Å—Ç—å: ¬´${news}¬ª`);
    }
  }
  interface Observable { //—Ç–∏–ø –Ω–∞–±–ª—é–¥–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    subscribe(observer: Observer): void;
    unsubscribe(observer: Observer): void;
    notify(news: string): void;
  }
  class NewsPublic implements Observable { //–∏—Å—Ç–æ—á–Ω–∏–∫
    subscribers: Observer[] = [];
    subscribe(observer: Observer) { /* –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ */
      this.subscribers.push(observer);
    }
    unsubscribe(observer: Observer) { /* –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø–∏—Å–∫–∏ */
      this.subscribers = this.subscribers.filter(current => current !== observer);
    }
    notify(news: string) { /* –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ */
      this.subscribers.forEach(observer => observer.update(news));
    }
  }
  const firstNewsPublic = new NewsPublic();
  const subsciber1 = new Subscriber('–ê–Ω–∞—Ç–æ–ª–∏–π');
  const subsciber2 = new Subscriber('–ê–Ω—Ç–æ–Ω');
  /* –°–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫–∏ */
  firstNewsPublic.subscribe(subsciber1);
  firstNewsPublic.subscribe(subsciber2);
  /* –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å */
  firstNewsPublic.notify('–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–º–µ—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –≤–ª–µ—á–µ—Ç –∑–∞...');
  /* –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ —Ä–µ–∞–≥–∏—Ä—É—é—Ç */
  // –ê–Ω–∞—Ç–æ–ª–∏–π –ø–æ–ª—É—á–∏–ª –Ω–æ–≤–æ—Å—Ç—å: ¬´–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–º–µ—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –≤–ª–µ—á–µ—Ç –∑–∞...¬ª
  // –ê–Ω—Ç–æ–Ω –ø–æ–ª—É—á–∏–ª –Ω–æ–≤–æ—Å—Ç—å: ¬´–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–º–µ—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –≤–ª–µ—á–µ—Ç –∑–∞...¬ª

//–ø—Ä–∏–º–µ—Ä
  type ObserverFn<T> = (state: T) => void;
  interface Observable<T> {
    subscribe(fn: ObserverFn<T>): void;
    unsubscribe(fn: ObserverFn<T>): void;
    notify(data: T): void;
  }
  class Store<T> implements Observable<T> {
    private state: T;
    private subscribers: ObserverFn<T>[] = [];
    constructor(initialState: T) {
      this.state = initialState;
    }
    subscribe(fn: ObserverFn<T>) {
      this.subscribers.push(fn); // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    }
    unsubscribe(fn: ObserverFn<T>) {
      const index = this.subscribers.indexOf(fn);
      if (index !== -1) {
        this.subscribers.splice(index, 1); // –£–¥–∞–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      }
    }
    notify(data: T) {
      this.subscribers.forEach(subscriber => subscriber(data)); // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏-–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    }
    update(newState: T) {
      this.state = newState;
      this.notify(this.state);
    }
  }
  const store = new Store<string>('');
  store.subscribe(console.log);
  store.update('–í–∞—Å–∏–ª–∏–π');
  store.update('–ü—ë—Ç—Ä');
  store.update('–ò–≤–∞–Ω');

//–ü–∞—Ç—Ç–µ—Ä–Ω Builder
  //todo
  //–ø—Ä–∏–º–µ—Ä
  type Rule = {
    search: string[],
    replaceTo: string;
  }
  class Corrector {
    constructor(public rules: Rule[] = []) {}
    handle(text: string) {
      return this.rules.reduce((value, rule) => {
        return rule.search.reduce((value, search) => {
          return value.replace(new RegExp(search, 'g'), rule.replaceTo);
        }, value);
      }, text);
    }
  }
  class CorrectorBuilder {
    private corrector: Corrector;
    constructor() {
      this.corrector = new Corrector();
    }
    addRule(search: string | string[], replaceTo: string): CorrectorBuilder {
      const searchArray = Array.isArray(search) ? search : [search];
      this.corrector.rules.push({ search: searchArray, replaceTo });
      return this;
    }
    getResult(): Corrector {
      return this.corrector;
    }
  }
  const builder = new CorrectorBuilder()
    .addRule('–∂—ã', '–∂–∏')
    .addRule('—à—ã', '—à–∏');
  builder.addRule(['—Ç–≤–æ–π', '–º–æ–π'], '–Ω–∞—à');
  const corrector = builder.getResult();
  console.log(
    corrector.handle('–≠—Ç–æ—Ç —Ç–≤–æ–π –∫–æ—Ç –∏—Å–ø–æ—Ä—Ç–∏–ª –º–æ–π –ª—é–±–∏–º—ã–π –¥–∏–≤–∞–Ω! –ù—É —á—Ç–æ –∑–∞ –≥–ª—É–ø–æ–µ –∂—ã–≤–æ—Ç–Ω–æ–µ!')
  );

