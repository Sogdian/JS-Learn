//В методе push будет происходить магия роутинга
const push = (event) => {
  // Отменяем действие по умолчанию, которое должно произойти по клику на ссылку
  event.preventDefault();

  const {
    target: { id, classList }
  } = event;
  const url = event.target.getAttribute("href");

  // Изменяем заголовок страницы <title></title>
  document.title = id;

  // Меняем URL страницы
  window.history.pushState({ id }, "", url); //За роутинг в нашем коде отвечает строка
    //history предоставляет доступ к History API и позволяет работать с историей браузера, по которой мы можем навигироваться или даже изменять её.
};

//Теперь повесим на каждую ссылку обработчик события onclick:
window.onload = () => {
  const navLinks = document.getElementsByClassName("route");
  for (let link of navLinks) {
    link.addEventListener("click", push);
  }
};

//Добавление новой записи в историю
  window.history.pushState(state, title [, url]); //добавить новую запись,
    //Метод pushState подойдёт для добавления новых шагов в историю браузера.
    //Если мы будем возвращаться назад по истории с помощью браузерной кнопки «Назад».
  window.history.replaceState(state, title [, url]) //заменить существующую.
    //replaceState - переписать историю
    //state — состояние для новой записи в истории. Так можно пробрасывать параметры на страницы и получать их именно в том месте, куда передали. Если параметры не нужны, можно передать null. В примере выше мы передали уникальный id из тега a, теперь мы сможем его использовать в качестве заголовка страницы.
    //title — заголовок страницы.  Пока все браузеры, кроме Safari, игнорируют этот параметр, но когда-то могут начать его использовать, поэтому лучше передавать пустую строку.
    //url — URL страницы, которую хотим показать. Это необязательный параметр. Иногда не нужно добавлять новую запись в историю браузера, требуется лишь изменить state текущей страницы. В этом случае url можно опустить.

  //Навигация по истории посещений
  history.back() //перемещение на предыдущую страницу истории;
    window.onload = () => {
      const back = document.getElementById("backButton");
      back.onclick = () => window.history.back();
    }
  history.forward() //перемещение на следующую страницу истории;
  history.go(n) //универсальное перемещение.
    //можно переместиться на любую страницу истории, нужно лишь вместо n передать необходимое число, вызвав:
      //history.go(2), вы переместитесь на 2 страницы вперёд от текущей;
      //history.go(1), на одну страницу вперёд, что соответствует history.forward().
      //n может принимать отрицательные значения, и тогда history.go(-1) соответствует history.back().


